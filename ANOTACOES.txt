							CURSO DE SQL COM SQL SERVER BÓSON TREINAMENTOS

O SQL (Structured Query Language) é a linguagem padrão usada para interagir com bancos de dados relacionais, e o SQL Server é um dos sistemas de gerenciamento de banco de dados mais populares da Microsoft.

Passo 1: Criando uma Tabela
A criação de uma tabela é a primeira coisa que você faz ao configurar um banco de dados. Vamos criar uma tabela simples para armazenar informações de clientes:

CREATE TABLE Clientes (
    ClienteID INT PRIMARY KEY,       -- Identificador único para cada cliente
    Nome NVARCHAR(100),              -- Nome do cliente
    Email NVARCHAR(100),             -- E-mail do cliente
    DataNascimento DATE              -- Data de nascimento do cliente
);

Explicação:
CREATE TABLE: cria uma nova tabela no banco de dados.
INT: tipo de dado para números inteiros.
NVARCHAR(100): tipo de dado para texto (strings) com até 100 caracteres.
PRIMARY KEY: define que a coluna ClienteID será a chave primária, ou seja, cada valor nela deve ser único.

Passo 2: Inserindo Dados
Depois de criar a tabela, você pode inserir dados nela usando o comando INSERT INTO:
INSERT INTO Clientes (ClienteID, Nome, Email, DataNascimento)
VALUES (1, 'João Silva', 'joao.silva@email.com', '1990-05-15');

Explicação: INSERT INTO insere dados na tabela.
Os valores entre parênteses correspondem às colunas da tabela.

Passo 3: Consultando Dados
Agora, para consultar os dados que você inseriu na tabela, você usa o comando SELECT:
SELECT * FROM Clientes;

Explicação:SELECT *: seleciona todos os dados da tabela.
FROM Clientes: indica de qual tabela você quer buscar os dados.
Se você quiser consultar apenas alguns campos específicos, pode fazer assim:
SELECT Nome, Email FROM Clientes;

Passo 4: Atualizando Dados
Para atualizar dados existentes, você usa o comando UPDATE:
UPDATE Clientes
SET Email = 'novo.email@email.com'
WHERE ClienteID = 1;

Explicação:UPDATE: modifica dados existentes.
SET: define quais colunas e valores serão alterados.
WHERE: especifica quais linhas devem ser alteradas (se você não usar o WHERE, todos os registros serão atualizados).

Passo 5: Deletando Dados
Para excluir registros da tabela, você usa o comando DELETE:
DELETE FROM Clientes
WHERE ClienteID = 1;

Explicação: DELETE FROM: exclui dados de uma tabela.
WHERE: especifica qual registro deve ser excluído. Sem o WHERE, todos os registros seriam excluídos.

Passo 6: Filtrando Dados
Você pode filtrar dados usando a cláusula WHERE. Por exemplo, se você quiser ver todos os clientes que nasceram após 1º de janeiro de 1990:
SELECT * FROM Clientes
WHERE DataNascimento > '1990-01-01';

Passo 7: Ordenando Resultados
Para ordenar os resultados de uma consulta, você pode usar a cláusula ORDER BY:
SELECT * FROM Clientes
ORDER BY Nome ASC;  -- Ordena pelo nome em ordem crescente (ASC)

Se quiser ordenar em ordem decrescente (do Z ao A), pode usar DESC:
SELECT * FROM Clientes
ORDER BY Nome DESC;
_______________________________________________________________________________________________________________________________________________________________________

* RESTRIÇÕES DE COLUNA CONSTRAINT (CLÁUSULA CONSTRAINT)
- Restrições são regras pré-definidas impostas às colunas de uma tabela.
- Usadas para controlar os dados que são inseridos, em nível de coluna ou de tabela.
- Podem ser especificadas no momento de criação da tabela (CREATE) ou após a tabela ter sido criada (ALTER)

* Constraints no SQL Server:
- NOT NULL: Por padrão, o SQL Server permite armazenamento de valores nulos em colunas. A constraint NOT NULL impede que uma coluna aceite valores NULL. Deste modo, não é possível inserir um registro (ou atualizar) sem que haja um valor neste campo. Exemplo: Validade DATE NOT NULL
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
- UNIQUE: Assegura que não haja valores duplicados em uma coluna ou combinação de colunas. Pode haver várias constraints UNIQUE em uma tabela, mas apenas uma Chave Primária por tabela. Uma constraint PRIMARY KEY automaticamente possui uma restrição UNIQUE definida. Exemplo: NomeProduto VARCHAR(50) NOT NULL UNIQUE
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
- CHECK: Define um conjunto de valores válidos que podem ser inseridos em determinadas colunas. Se for definida em uma única coluna ela permitirá apenas determinados valores para a coluna. Usada para limitar os valores que podem ser colocados em uma coluna. Exemplo: PrecoProduto MONEY NOT NULL CHECK(PrecoProduto > 0)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
- PRIMARY KEY: Uma chave primária identifica de forma única cada registro em uma tabela de banco de dados. A coluna não pode conter valores repetidos e nem valores NULL. Estabelece os relacionamentos entre tabelas. Cada tabela só pode ter uma única chave primária. Exemplo: CodProduto SMALLINT PRIMARY KEY
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
- FOREIGN KEY: Cria relacionamentos entre tabelas, combinada com chaves primárias (relacionamento pai-filho). Cada registro em uma coluna de chave estrangeira da tabela-filha deve possuir um registro correspondente na chave primária (tabela-pai). Não pode possuir valores NULL. Impõe integridade referencial às tabelas.
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
- DEFAULT: Fornece um valor padrão para uma coluna. O valor padrão é inserido em uma coluna caso nenhum outro valor seja especificado durante a inserção de um novo registro. Usada para fornecer um valor padrão para uma coluna quando nenhum valor é especificado. Exemplo: CodFornecedor SMALLINT DEFAULT 1520
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

				
			* DEFRENÇAS ENTRE PRIMARY KEY e UNIQUE
+--------------------------+----------------------------------------------------------------+
|       Primary Key        |                          Unique                                |
+-------------------------+-----------------------------------------------------------------+
| Identifica cada linha de | Identifica valores únicos em uma coluna de uma tabela.         |
| forma única em uma       |                                                                |
| tabela.                  |                                                                |
+-------------------------+-----------------------------------------------------------------+
| Não podem haver valores  | Pode aceitar um valor NULL na coluna.                          |
| NULL.                    |                                                                |
+-------------------------+-----------------------------------------------------------------+
| Uma tabela somente pode  | Uma tabela pode ter mais de uma restrição unique.              |
| ter uma única chave      |                                                                |
| primária.                |                                                                |
+------------------------- +----------------------------------------------------------------+
| Um índice clusterizado   | Índices não-clusterizados são criados nas colunas.             |
| é criado por padrão.     |                                                                |
+-------------------------+---------------------------------------------------------------+

EXEMPLO DE CONSTRAINTS
CREATE TABLE Produtos(
   CodProduto SMALLINT PRIMARY KEY,
   NomeProduto VARCHAR(50) NOT NULL UNIQUE,
   CodFornecedor SMALLINT DEFAULT 1520,
   Validade DATE NOT NULL,
   PrecoProduto MONEY NOT NULL CHECK(PrecoProduto > 0),
   CONSTRAINT fk_id_fornecedor FOREIGN KEY (CodFornecedor)
   REFERENCES fornecedores (CodFornecedor) ON DELETE CASCADE
);



















































